---
name: Run tests and package components

on:
  push:

  workflow_dispatch:

  pull_request:
jobs:
  test-components:
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - component: "items"
            python-version: "3.9"
          - component: "common"
            python-version: "3.9"
          - component: "schedulers"
            python-version: "3.9"
    uses: ./.github/workflows/build-and-test-python.yml
    with:
      python-version: ${{ matrix.cfg.python-version }}
      directory: ${{ matrix.cfg.component }}

  package-components:
    needs: test-components
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - component: "items"
          - component: "common"
          - component: "schedulers"
          - component: "items-front"
          - component: "plugins-interface"
    uses: ./.github/workflows/package-component.yml
    with:
      component: ${{ matrix.cfg.component }}

  pre-commit:
    runs-on: ubuntu-latest
    env:
      tflint_version: v0.44.1

    steps:
      #- uses: actions/cache@v3
      #  name: Cache TFLint
      #  id: cache-tflint
      #  with:
      #    path: /usr/local/bin/tflint
      #    key: ${{ runner.os }}-tflint-${{ env.tflint_version }}
      #- uses: actions/cache@v3
      #  name: Cache TFLint plugin dir
      #  with:
      #    path: ~/.tflint.d/plugins
      #    key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}-${{ env.tflint_version }}
      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        #if: steps.cache-tflint.outputs.cache-hit != 'true'
        with:
          tflint_version: ${{ env.tflint_version }}
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0

  swagger-json-schemas:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Check if swagger .py json schemas are up-to-date with swagger.yaml
        run: |
          pipx install openapi2jsonschema
          bash -x utils/test_json_schemas_updated.sh

  diagrams-png-generation:
    runs-on: ubuntu-latest
    if: ${{ "1" == "0" }}

    steps:
      - uses: actions/checkout@v3
      - name: Expose GitHub Runtime
        # This is used to allow gha caching for buildx later on
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check if .py diagrams are up-to-date with generated .pngs
        run: |
          GHA_DOCKER_CACHING=true bash -x utils/test_diagrams_are_up_to_date.sh
