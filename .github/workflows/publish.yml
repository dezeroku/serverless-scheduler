name: Publish docker images and helm chart

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - dev

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  pull_request:
jobs:
  # Push images to GHCR.
  docker-publish:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG_SHA: "${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha ||  github.sha }}"

    # Smart way to publish images for all the components
    strategy:
      matrix:
        component: ["front", "manager", "sender", "checker", "screenshoter", "comparator"]

    steps:
      - uses: actions/checkout@v2

      -
        name: Set up variables (production)
        if: github.event_name != 'pull_request'
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          IMAGE_NAME="monitor-page-${{ matrix.component }}"
          IMAGE_ID=$(echo "ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME" | tr '[A-Z]' '[a-z]')

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      -
        name: Set up variables (PR)
        if: github.event_name == 'pull_request'
        run: |
          VERSION="${{ github.event.pull_request.head.ref }}"

          IMAGE_NAME="monitor-page-${{ matrix.component }}"
          IMAGE_ID=$(echo "ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME" | tr '[A-Z]' '[a-z]')

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.IMAGE_NAME }}-${{ env.IMAGE_TAG_SHA }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.IMAGE_NAME }}-

      -
        name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.component }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_ID }}:${{ env.VERSION }}
            ${{ env.IMAGE_ID }}:${{ env.IMAGE_TAG_SHA }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        if: matrix.component != 'checker' && matrix.component != 'sender' && matrix.component != 'manager' && matrix.component != 'front'

      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.component }}
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_ID }}:${{ env.VERSION }}
            ${{ env.IMAGE_ID }}:${{ env.IMAGE_TAG_SHA }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        if: matrix.component == 'checker' || matrix.component == 'sender' || matrix.component == 'manager' || matrix.component == 'front'

      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  chart-publish:
    runs-on: ubuntu-latest
    needs: docker-publish
    steps:
      - uses: actions/checkout@v2

      -
        name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.5.4

      -
        name: Build Helm chart
        run: |
          cd k8s/monitor-page
          make
          helm package ./

      -
        name: Upload the Helm chart
        uses: actions/upload-artifact@v2
        with:
          name: monitor-page-chart
          path: k8s/monitor-page/*.tgz

  k8s-deployment:
    runs-on: ubuntu-latest
    needs: chart-publish
    env:
      DEPLOY_NAMESPACE: monitor-page
      RELEASE_NAME: monitor-page
      CUSTOM_HELM_PARAMS: "--values helm-override.yaml"
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      -
        name: Get the Helm chart
        uses: actions/download-artifact@v2
        with:
          name: monitor-page-chart

      -
        name: Install Open VPN and jq
        run: sudo apt-get install openvpn jq -y

      -
        run: 'echo "$VPN_CONFIG" > config.ovpn && echo "$VPN_PASSWORD" > pass-file'
        shell: bash
        env:
          VPN_CONFIG: ${{ secrets.VPN_CONFIG }}
          VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}

      -
        name: Connect VPN
        # This sleep 5 is rather ugly...
        # How can we know that openvpn has successfully connected and we can keep it in the background?
        run: |
          sudo openvpn --config config.ovpn --daemon
          sleep 5

      -
        name: Set k8s context using kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      -
        run: 'echo "$HELM_OVERRIDE" > helm-override.yaml'
        shell: bash
        env:
          HELM_OVERRIDE: ${{ secrets.HELM_OVERRIDE }}

      -
        name: Deploy the chart to k8s
        run: |
          RELEASES="$(helm list -n ${{ env.DEPLOY_NAMESPACE }} -o json | jq '.[].name' -r )"
          if grep "${{ env.RELEASE_NAME }}" <<< ${RELEASES}; then
            echo "Release already exists"
            helm upgrade "${{ env.RELEASE_NAME }}" monitor-page*.tgz -n "${{ env.DEPLOY_NAMESPACE }}" ${{ env.CUSTOM_HELM_PARAMS }}
          else
            echo "Initial release needs to be done"
            helm install "${{ env.RELEASE_NAME }}" monitor-page*.tgz -n "${{ env.DEPLOY_NAMESPACE }}" --create-namespace ${{ env.CUSTOM_HELM_PARAMS }}
          fi

      # Is this step really needed?
      -
        name: Clean up files
        if: always()
        run: |
          rm -f config.ovpn pass-file ~/.kube/config.yaml
          sudo killall openvpn
