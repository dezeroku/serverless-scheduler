service: aws-serverless
frameworkVersion: '3'

provider:
  name: aws
  region: eu-central-1
  runtime: python3.8
  httpApi:
    # We have a domain anyway
    disableDefaultEndpoint: true
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: CognitoUserPool
        audience:
          - Ref: CognitoUserPoolClient

constructs:
  jobs:
    type: queue
    worker:
      handler: handler.consumer
  # The front webpage configuration can also be handled like that (+ route53 via cloudformation)
  # But this requires the project to be deployed in us-east-1
  # The big advantage here is automatic cloudfront cache invalidation
#  react:
#    type: static-website
#    path: ../front/build
#    domain: ${self:custom.userConfig.frontDomain}
#    certificate: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}

functions:
  producer:
    handler: handler.producer
    events:
      - httpApi:
          method: post
          path: /produce
          authorizer: serviceAuthorizer

    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}
  login-login:
    handler: login.login
    events:
      - httpApi:
          method: get
          path: /login/cognito-login

    environment:
      FRONT_DOMAIN: ${self:custom.userConfig.frontDomain}
      CLIENT_POOL_ID:
        Ref: CognitoUserPoolClient

  login-logout:
    handler: login.logout
    events:
      - httpApi:
          method: get
          path: /login/cognito-logout

    environment:
      FRONT_DOMAIN: ${self:custom.userConfig.frontDomain}
      CLIENT_POOL_ID:
        Ref: CognitoUserPoolClient

plugins:
  - serverless-lift
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-certificate-creator
  - serverless-s3-sync
package:
  patterns:
    - '!node_modules/**'
    - '!lambda_venv/**'
    - '!resources/**'

custom:
  userConfig: ${file(user-config.yml)}

  s3Sync:
    # A simple configuration for copying static assets
    # It also takes care of cleaning up the S3 buckets in 'remove' step
    - bucketNameKey: FrontBucketId
      localDir: ../front/build

  pythonRequirements:
    dockerizePip: true
  customDomain:
    # This requires the certificate for domain to be provided
    domainName: ${self:custom.userConfig.apiDomain}
    basePath: 'v1'
    stage: ${sls:stage}
    createRoute53Record: true
    endpointType: regional
    # Run as part of the `deploy`
    #autoDomain: true
    apiType: http
  customCertificate:
    -
      certificateName: ${self:custom.userConfig.apiDomain}
      hostedZoneNames: ${self:custom.userConfig.baseDomain}.
      region: ${self:provider.region}
      enabled: true
      rewriteRecords: false
    -
      certificateName: ${self:custom.userConfig.frontDomain}
      hostedZoneNames: ${self:custom.userConfig.baseDomain}.
      subjectAlternativeNames:
        - auth.${self:custom.userConfig.frontDomain}
      # This is a cert for CloudFront, so it has to be in us-east-1
      region: us-east-1
      enabled: true
      rewriteRecords: false

resources:
  - ${file(resources/front-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cloudfront.yml)}
