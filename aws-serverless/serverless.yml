service: aws-serverless
frameworkVersion: '3'

provider:
  name: aws
  region: eu-central-1
  runtime: python3.9
  httpApi:
    # We have a domain anyway
    disableDefaultEndpoint: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: CognitoUserPool
        audience:
          - Ref: CognitoUserPoolClient

constructs:
  jobs:
    type: queue
    worker:
      handler: handler.consumer

functions:
  producer:
    handler: handler.producer
    events:
      - httpApi:
          method: post
          path: /produce
          authorizer: serviceAuthorizer

    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}

plugins:
  - serverless-lift
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-certificate-creator
  - serverless-s3-sync
package:
  patterns:
    - '!node_modules/**'
    - '!lambda_venv/**'
    - '!resources/**'

custom:
  userConfig: ${file(user-config.yml)}

  s3Sync:
    # A simple configuration for copying static assets
    # It also takes care of cleaning up the S3 buckets in 'remove' step
    - bucketNameKey: FrontBucketId
      localDir: ../front/build

  pythonRequirements:
    dockerizePip: true
  customDomain:
    # This requires the certificate for domain to be provided
    domainName: ${self:custom.userConfig.apiDomain}
    basePath: 'v1'
    stage: ${sls:stage}
    createRoute53Record: true
    endpointType: regional
    # Run as part of the `deploy`
    #autoDomain: true
    apiType: http
  customCertificate:
    certificateName: ${self:custom.userConfig.apiDomain}
    hostedZoneNames: ${self:custom.userConfig.baseDomain}.
    subjectAlternativeNames:
      #- "www.${self:custom.userConfig.apiDomain}"
      #- "www.${self:custom.userConfig.frontDomain}"
      - ${self:custom.userConfig.frontDomain}
    region: ${self:provider.region}
    enabled: true
    rewriteRecords: false

resources:
  - ${file(resources/front-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  #- ${file(resources/cloudfront.yml)}
#  - HttpApi:
#      DependsOn: serviceUserPool
