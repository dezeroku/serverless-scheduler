# Default values for monitor-page.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

baseUrl: "monitor.example.url"
baseRegistry: "ghcr.io"

# THESE HAVE TO BE CHANGED IN PRODUCTION
# This can be just a random string
jwtSecret: "development"
# This one requires Sendgrid account and API key with permissions for sending mails
sendgridAPIKey: "nokey"

# Postgres DB setup requires `postgres-operator` to be available in the cluster

# That's the name of the namespace that new checkers should be deployed to
# It's set to the same namespace as the one for the whole deployment if empty.
# If set, user has to make sure that the namespace exists
checkerNamespace: ""

# Custom namespaces per component are not supported.
# There is a single namespace for the main components + possiblity of specifying another one for checkers.

# TODO: imagePullSecret regcred should not be needed when we go public, remove references to it then

manager:
  replicaCount: 1
  
  dbType: "postgres"

  # Only used in sqlite3 case
  dbLocation: "/data/manager.db"
  dbMount: "/data/"
  dbStorageClass: "local-path"

  image:
    # Overrides the repository whose default is "{{ printf( "%s/dezeroku/monitor-page_manager" .Values.baseUrl) }}"
    repository: ""
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  
  imagePullSecrets: ["regcred"]
  nameOverride: ""
  fullnameOverride: ""

  selectorLabels:
    app: manager

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

  env:
    # Overrides the APP_URL whose default is "https://api.{{ baseUrl }}"
    APP_URL: ""

    # Overrides the CHECKER_IMAGE whose default is "{{ baseRegistry }}/dezeroku/checker .Chart.appVersion"
    CHECKER_IMAGE: ""

    # Overrides the FRONT_URL whose default is "https://{{ Url }}"
    FRONT_URL: ""

    ALLOWED_ORIGIN: "*"

  service:
    name: manager
    port: 80

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: api.monitor.example.url
        paths:
        - path: /
          backend:
            serviceName: manager
            servicePort: 80
    tls:
      - secretName: api-monitor-base-tls
        hosts:
          - api.monitor.example.url
  
  resources:
    requests:
      cpu: 40m
      memory: 40Mi
    limits:
      cpu: 300m
      memory: 300Mi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  
  nodeSelector: 
    workHorse: "yes"
    
  tolerations: []
  affinity: {}

screenshoter:
  replicaCount: 1
  
  image:
    # Overrides the repository whose default is "{{ printf( "%s/dezeroku/monitor-page_screenshoter" .Values.baseUrl) }}"
    repository: ""
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  
  imagePullSecrets: ["regcred"]
  nameOverride: ""
  fullnameOverride: ""
  
  podAnnotations: {}
  
  podSecurityContext: {}
  
  securityContext: {}
  
  service:
    port: 80
  
  resources:
    requests:
      cpu: 50m
      memory: 50Mi
    limits:
      cpu: 400m
      memory: 600Mi
 
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  
  nodeSelector:
    workHorse: "yes"

  tolerations: []
  
  affinity: {}

sender:
  replicaCount: 2

  mailSender: "monitor@example.url"
  
  image:
    # Overrides the repository whose default is "{{ printf( "%s/dezeroku/monitor-page_sender" .Values.baseUrl) }}"
    repository: ""
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  
  imagePullSecrets: ["regcred"]
  nameOverride: ""
  fullnameOverride: ""
  
  podAnnotations: {}
  
  podSecurityContext: {}
  
  securityContext: {}
  
  service:
    port: 80
  
  resources:
    requests:
      cpu: 20m
      memory: 20Mi
    limits:
      cpu: 100m
      memory: 100Mi
  
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  
  nodeSelector:
    workHorse: "yes"
  
  tolerations: []
  
  affinity: {}

comparator:
  replicaCount: 2

  image:
    # Overrides the repository whose default is "{{ printf( "%s/dezeroku/monitor-page_comparator" .Values.baseUrl) }}"
    repository: ""
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: ["regcred"]
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    port: 80

  resources:
    requests:
      cpu: 50m
      memory: 50Mi
    limits:
      cpu: 600m
      memory: 900Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector:
    kubernetes.io/arch: amd64
    workHorse: "yes"

  tolerations: []

  affinity: {}

front:
  replicaCount: 1

  image:
    # Overrides the repository whose default is "{{ printf( "%s/dezeroku/monitor-page_front" .Values.baseUrl) }}"
    repository: ""
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: ["regcred"]
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    name: front
    port: 80

  resources:
    requests:
      cpu: 20m
      memory: 20Mi
    limits:
      cpu: 200m
      memory: 200Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector:
    workHorse: "yes"

  tolerations: []

  affinity: {}

  env:
    # Overrides the REACT_APP_API_URL whose default is "https://api.{{ baseUrl }}"
    REACT_APP_API_URL: ""

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: monitor.example.url
        paths:
        - path: /
          backend:
            serviceName: front
            servicePort: 80
    tls:
      - secretName: front-monitor-base-tls
        hosts:
          - monitor.example.url

db:
  replicaCount: 1

  dbType: "postgres"
  dbName: "monitor"
  dbOwner: "monitor"
  dbPort: 5432
  teamId: "monitor"
  storageClass: "local-path"
