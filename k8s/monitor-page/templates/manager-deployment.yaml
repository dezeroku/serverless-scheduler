apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "monitor-page.fullname" . }}-manager
spec:
  selector:
    matchLabels:
      {{- include "monitor-page.selectorLabels" . | nindent 6 }}
      app: manager
  {{- if not .Values.manager.autoscaling.enabled }}
  replicas: {{ .Values.manager.replicaCount }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "monitor-page.selectorLabels" . | nindent 8 }}
        app: manager
    spec:
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.manager.securityContext | nindent 12 }}
          image: "{{ .Values.manager.image.repository | default (printf "%s/dezeroku/monitor-page-manager" .Values.baseRegistry) }}:{{ .Values.manager.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.manager.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /live
              port: http
          readinessProbe:
            httpGet:
              path: /ready
              port: http
          resources:
            {{- toYaml .Values.manager.resources | nindent 12 }}

          {{- if eq .Values.manager.dbType "sqlite3" }}
          volumeMounts:
          - mountPath: "{{ .Values.manager.dbMount }}"
            name: db-mount
          {{- end }}

          env:
          - name: APP_URL
            value: {{ .Values.manager.env.APP_URL | default (printf "https://api.%s" .Values.baseUrl) }}
          - name: CHECKER_IMAGE
            value: {{ .Values.manager.env.CHECKER_IMAGE | default (printf "%s/dezeroku/monitor-page-checker:%s" .Values.baseRegistry .Chart.AppVersion) }}
          - name: CHECKER_NAMESPACE
            value: {{ .Values.checkerNamespace | default .Release.Namespace }}
          - name: FRONT_URL
            value: "{{ .Values.manager.env.FRONT_URL | default (printf "https://%s" .Values.baseUrl) }}"
          - name: ALLOWED_ORIGIN
            value: "{{ .Values.manager.env.ALLOWED_ORIGIN }}"
            # TODO: something has to be done about this entry
          - name: JWT_KEY
            valueFrom:
              secretKeyRef:
                name: "{{ (printf "%s-secret-jwt" (include "monitor-page.fullname" .)) }}"
                key: jwt-secret
          - name: DATABASE_TYPE
            value: "{{ .Values.manager.dbType }}"

          {{- if eq .Values.manager.dbType "sqlite3" }}
          - name: DATABASE_LOCATION
            value: "{{ .Values.manager.dbLocation }}"
          {{- end }}

          {{- if ne .Values.manager.dbType "sqlite3" }}
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: "{{ (printf "%s.%s-%s-db.credentials" .Values.db.dbOwner .Values.db.teamId (include "monitor-page.fullname" .))}}"
                key: username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ (printf "%s.%s-%s-db.credentials" .Values.db.dbOwner .Values.db.teamId (include "monitor-page.fullname" .))}}"
                key: password
          - name: DATABASE_PORT
            value: "{{ .Values.db.dbPort }}"
          - name: DATABASE_HOST
            value: "{{ (printf "%s-%s-db.%s.svc.cluster.local"  .Values.db.teamId (include "monitor-page.fullname" .) .Release.Namespace) }}"
          - name: DATABASE_DB_NAME
            value: "{{ .Values.db.dbName }}"
          {{- end }}

          - name: SCREENSHOT_SERVICE
            value: "{{ include "monitor-page.fullname" . }}-screenshoter"
          - name: SENDER_SERVICE
            value: "{{ include "monitor-page.fullname" . }}-sender"
          - name: COMPARATOR_SERVICE
            value: "{{ include "monitor-page.fullname" . }}-comparator"
          - name: SCREENSHOT_API_PORT
            value: "{{ .Values.screenshoter.service.port }}"
          - name: SENDER_API_PORT
            value: "{{ .Values.sender.service.port }}"
          - name: COMPARATOR_API_PORT
            value: "{{ .Values.comparator.service.port }}"

      {{- with .Values.manager.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.manager.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.manager.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if eq .Values.manager.dbType "sqlite3" }}
      volumes:
      - name: db-mount
        persistentVolumeClaim:
          claimName: {{ include "monitor-page.fullname" . }}-manager-db
      {{- end }}


---
{{- if eq .Values.manager.dbType "sqlite3" }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ include "monitor-page.fullname" . }}-manager-db
  annotations:
    volume.beta.kubernetes.io/storage-class: "{{ .Values.manager.dbStorageClass }}"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
{{- end }}
