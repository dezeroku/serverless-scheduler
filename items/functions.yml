items-get:
  package:
    artifact: .deployment-temp/lambda-zips/items-lambda.zip
  handler: items/get.get
  events:
    - httpApi:
        method: get
        path: /items
        authorizer: serviceAuthorizer
  environment:
    DYNAMO_DB: ${self:custom.tfOutputs.items_dynamodb_name.value}

item-create:
  package:
    artifact: .deployment-temp/lambda-zips/items-lambda.zip
  handler: items/create.create
  events:
    - httpApi:
        method: post
        path: /item/create
        authorizer: serviceAuthorizer
  environment:
    DYNAMO_DB: ${self:custom.tfOutputs.items_dynamodb_name.value}

item-delete:
  package:
    artifact: .deployment-temp/lambda-zips/items-lambda.zip
  handler: items/delete.delete
  events:
    - httpApi:
        method: delete
        path: /item/delete/{item_id}
        authorizer: serviceAuthorizer
  environment:
    DYNAMO_DB: ${self:custom.tfOutputs.items_dynamodb_name.value}

item-update:
  package:
    artifact: .deployment-temp/lambda-zips/items-lambda.zip
  handler: items/update.update
  events:
    - httpApi:
        method: put
        path: /item/update/{item_id}
        authorizer: serviceAuthorizer
  environment:
    DYNAMO_DB: ${self:custom.tfOutputs.items_dynamodb_name.value}
