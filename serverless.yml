service: ${self:custom.baseConfig.service}
frameworkVersion: '3'

provider:
  versionFunctions: false
  name: aws
  region: ${self:custom.baseConfig.aws_region}
  runtime: python3.8
  memorySize: 128
  httpApi:
    # We have a domain anyway
    disableDefaultEndpoint: true
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: CognitoUserPool
        audience:
          - Ref: CognitoUserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            Fn::Join:
              - ''
              - - arn:aws:dynamodb:${self:provider.region}:*:table/
                - ${self:custom.tfOutputs.items_dynamodb_name.value}

#constructs:
  #jobs:
  #  type: queue
  #  worker:
  #    module: handler-demo
  #    handler: handler.consumer
  #monitors:
  #  type: queue
  #  worker:
  #    module: monitors
  #    handler: consumer.consumer

  # The front webpage configuration can also be handled like that (+ route53 via cloudformation)
  # But this requires the project to be deployed in us-east-1
  # The big advantage here is automatic cloudfront cache invalidation
#  react:
#    type: static-website
#    path: ../front/build
#    domain: ${self:custom.userConfig.frontDomain}
#    certificate: ${certificate(${self:custom.customCertificate.certificateName}):CertificateArn}

functions:
  - ${file(./items/functions.yml)}
    #- ${file(./login/functions.yml)}

#  producer:
#    module: handler-demo
#    handler: handler.producer
#    events:
#      - httpApi:
#          method: post
#          path: /produce
#          authorizer: serviceAuthorizer
#
#    environment:
#      QUEUE_URL: ${construct:jobs.queueUrl}

#  cognito-signup:
#    module: cognito
#    handler: cognito.signup
#    events:
#      - cognitoUserPool:
#          pool:
#            Ref: CognitoUserPool
#          trigger: PreSignUp
#          existing: true
#    environment:
#      DYNAMO_DB:
#        Ref: DynamoDB

plugins:
  - serverless-lift
  - serverless-domain-manager
  - serverless-s3-sync
package:
  individually: true

custom:
  baseConfig: ${file(terraform/terraform.tfvars.json)}
  tfOutputs: ${file(.deployment-temp/terraform/outputs.json)}

  s3Sync:
    # A simple configuration for copying static assets
    # It also takes care of cleaning up the S3 buckets in 'remove' step
    - bucketNameKey: FrontBucketId
      localDir: ./front/build
  customDomain:
    # This requires the certificate for domain to be provided
    domainName: ${self:custom.tfOutputs.api_domain.value}
    basePath: 'v1'
    stage: ${sls:stage}
    createRoute53Record: true
    endpointType: regional
    # Run as part of the `deploy`
    #autoDomain: true
    apiType: http
    certificateName: ${self:custom.tfOutputs.api_domain.value}
resources:
  - ${file(resources/front-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cloudfront.yml)}
